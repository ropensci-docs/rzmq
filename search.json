[{"path":"https://docs.ropensci.org/rzmq/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Whit Armstrong. Author. Michael Schubert. Contributor. Jeroen Ooms. Author, maintainer.","code":""},{"path":"https://docs.ropensci.org/rzmq/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Armstrong W, Ooms J (2024). rzmq: R Bindings 'ZeroMQ'. R package version 0.9.12https://docs.ropensci.org/rzmq/ https://ropensci.r-universe.dev/rzmq, https://docs.ropensci.org/rzmq/ https://ropensci.r-universe.dev/rzmq.","code":"@Manual{,   title = {rzmq: R Bindings for 'ZeroMQ'},   author = {Whit Armstrong and Jeroen Ooms},   year = {2024},   note = {R package version 0.9.12https://docs.ropensci.org/rzmq/ https://ropensci.r-universe.dev/rzmq},   url = {https://docs.ropensci.org/rzmq/ https://ropensci.r-universe.dev/rzmq}, }"},{"path":"https://docs.ropensci.org/rzmq/index.html","id":"rzmq","dir":"","previous_headings":"","what":"R Bindings for ZeroMQ","title":"R Bindings for ZeroMQ","text":"R Bindings ‘ZeroMQ’  Interface ‘ZeroMQ’ lightweight messaging kernel (see http://www.zeromq.org/ information).","code":""},{"path":"https://docs.ropensci.org/rzmq/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"R Bindings for ZeroMQ","text":"rzmq message queue serialized R objects. * rzmq implements standard socket pairs ZMQ offers. * ZMQ devices implemented yet, zmq_poll. * Look features shortly.","code":""},{"path":"https://docs.ropensci.org/rzmq/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Bindings for ZeroMQ","text":"Binary packages OS-X Windows can installed directly CRAN:","code":"install.packages(\"rzmq\")"},{"path":"https://docs.ropensci.org/rzmq/index.html","id":"build-from-source","dir":"","previous_headings":"","what":"Build from source","title":"R Bindings for ZeroMQ","text":"Installation source requires ZeroMQ. Debian Ubuntu use libzmq3-dev: Fedora need zeromq-devel: CentOS / RHEL install zeromq3-devel via EPEL: OS-X use zeromq Homebrew:","code":"sudo apt-get install -y libzmq3-dev sudo yum install zeromq-devel sudo yum install epel-release sudo yum install zeromq3-devel brew install zeromq"},{"path":"https://docs.ropensci.org/rzmq/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"R Bindings for ZeroMQ","text":"minimal example remote execution. execute R script remote server: execute bit locally:","code":"#!/usr/bin/env Rscript library(rzmq) context = init.context() socket = init.socket(context,\"ZMQ_REP\") bind.socket(socket,\"tcp://*:5555\") while(1) {     msg = receive.socket(socket);     fun <- msg$fun     args <- msg$args     print(args)     ans <- do.call(fun,args)     send.socket(socket,ans); } library(rzmq)  remote.exec <- function(socket,fun,...) {     send.socket(socket,data=list(fun=fun,args=list(...)))     receive.socket(socket) }  substitute(expr) context = init.context() socket = init.socket(context,\"ZMQ_REQ\") connect.socket(socket,\"tcp://localhost:5555\")  ans <- remote.exec(socket,sqrt,10000)"},{"path":"https://docs.ropensci.org/rzmq/reference/bind.socket.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an endpoint for accepting connections and bind it to the socket referenced by the socket argument. — bind.socket","title":"Create an endpoint for accepting connections and bind it to the socket referenced by the socket argument. — bind.socket","text":"zmq_bind() function shall create endpoint accepting connections bind socket referenced socket argument. endpoint argument string consisting two parts follows: transport ://address. transport part specifies underlying transport protocol use. meaning address part specific underlying transport protocol selected. following transports defined: inproc local -process (inter-thread) communication transport, see zmq_inproc(7) ipc local inter-process communication transport, see zmq_ipc(7) tcp unicast transport using TCP, see zmq_tcp(7) pgm, epgm reliable multicast transport using PGM, see zmq_pgm(7) exception ZMQ_PAIR sockets, single socket may connected multiple endpoints using zmq_connect(), simultaneously accepting incoming connections multiple endpoints bound socket using zmq_bind(). Refer zmq_socket(3) description exact semantics involved connecting binding socket multiple endpoints.","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/bind.socket.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an endpoint for accepting connections and bind it to the socket referenced by the socket argument. — bind.socket","text":"","code":"bind.socket(socket, address)"},{"path":"https://docs.ropensci.org/rzmq/reference/bind.socket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an endpoint for accepting connections and bind it to the socket referenced by the socket argument. — bind.socket","text":"socket zmq socket object. address transport described .","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/bind.socket.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an endpoint for accepting connections and bind it to the socket referenced by the socket argument. — bind.socket","text":"TRUE operation succeeds FALSE operation fails","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/bind.socket.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create an endpoint for accepting connections and bind it to the socket referenced by the socket argument. — bind.socket","text":"http://www.zeromq.org http://api.zeromq.org http://zguide.zeromq.org/page:","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/bind.socket.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create an endpoint for accepting connections and bind it to the socket referenced by the socket argument. — bind.socket","text":"ZMQ written Martin Sustrik <sustrik@250bpm.com> Martin Lucina <mato@kotelna.sk>. rzmq written Whit Armstrong.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rzmq/reference/bind.socket.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an endpoint for accepting connections and bind it to the socket referenced by the socket argument. — bind.socket","text":"","code":"if (FALSE) {  library(rzmq) context = init.context() in.socket = init.socket(context,\"ZMQ_PULL\") bind.socket(in.socket,\"tcp://*:5557\")  out.socket = init.socket(context,\"ZMQ_PUSH\") bind.socket(out.socket,\"tcp://*:5558\") }"},{"path":"https://docs.ropensci.org/rzmq/reference/connect.socket.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect the socket referenced by the socket argument to the endpoint specified by the endpoint argument. — connect.socket","title":"Connect the socket referenced by the socket argument to the endpoint specified by the endpoint argument. — connect.socket","text":"zmq_connect() function shall connect socket referenced socket argument endpoint specified endpoint argument. endpoint argument string consisting two parts follows: transport ://address. transport part specifies underlying transport protocol use. meaning address part specific underlying transport protocol selected. following transports defined: inproc local -process (inter-thread) communication transport, see zmq_inproc(7) ipc local inter-process communication transport, see zmq_ipc(7) tcp unicast transport using TCP, see zmq_tcp(7) pgm, epgm reliable multicast transport using PGM, see zmq_pgm(7) exception ZMQ_PAIR sockets, single socket may connected multiple endpoints using zmq_connect(), simultaneously accepting incoming connections multiple endpoints bound socket using zmq_bind(). Refer zmq_socket(3) description exact semantics involved connecting binding socket multiple endpoints.","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/connect.socket.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect the socket referenced by the socket argument to the endpoint specified by the endpoint argument. — connect.socket","text":"","code":"connect.socket(socket, address) disconnect.socket(socket, address)"},{"path":"https://docs.ropensci.org/rzmq/reference/connect.socket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect the socket referenced by the socket argument to the endpoint specified by the endpoint argument. — connect.socket","text":"socket zmq socket object. address transport described .","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/connect.socket.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect the socket referenced by the socket argument to the endpoint specified by the endpoint argument. — connect.socket","text":"TRUE operation succeeds FALSE operation fails","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/connect.socket.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Connect the socket referenced by the socket argument to the endpoint specified by the endpoint argument. — connect.socket","text":"http://www.zeromq.org http://api.zeromq.org http://zguide.zeromq.org/page:","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/connect.socket.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Connect the socket referenced by the socket argument to the endpoint specified by the endpoint argument. — connect.socket","text":"ZMQ written Martin Sustrik <sustrik@250bpm.com> Martin Lucina <mato@kotelna.sk>. rzmq written Whit Armstrong.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rzmq/reference/connect.socket.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connect the socket referenced by the socket argument to the endpoint specified by the endpoint argument. — connect.socket","text":"","code":"if (FALSE) { library(rzmq) context = init.context() in.socket = init.socket(context,\"ZMQ_PULL\") bind.socket(in.socket,\"tcp://*:5557\")  out.socket = init.socket(context,\"ZMQ_PUSH\") bind.socket(out.socket,\"tcp://*:5558\") }"},{"path":"https://docs.ropensci.org/rzmq/reference/init.context.html","id":null,"dir":"Reference","previous_headings":"","what":"initailize zmq context and zmq socket — init.context","title":"initailize zmq context and zmq socket — init.context","text":"initialize zmq context zmq socket used zmq operations.","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/init.context.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"initailize zmq context and zmq socket — init.context","text":"","code":"init.context(threads=1L) init.socket(context, socket.type)"},{"path":"https://docs.ropensci.org/rzmq/reference/init.context.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"initailize zmq context and zmq socket — init.context","text":"threads number threads context use context zmq context object. socket.type ZMQ socket type requested     e.g. ZMQ_REQ,ZMQ_REP,ZMQ_PULL,ZMQ_PUSH, etc.","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/init.context.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"initailize zmq context and zmq socket — init.context","text":"init.context returns zmq context object. init.socket returns zmq socket object.","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/init.context.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"initailize zmq context and zmq socket — init.context","text":"http://www.zeromq.org   http://api.zeromq.org   http://zguide.zeromq.org/page:","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/init.context.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"initailize zmq context and zmq socket — init.context","text":"ZMQ written Martin Sustrik <sustrik@250bpm.com> Martin Lucina <mato@kotelna.sk>.   rzmq written Whit Armstrong.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rzmq/reference/init.context.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"initailize zmq context and zmq socket — init.context","text":"","code":"if (FALSE) {  library(rzmq) context = init.context() in.socket = init.socket(context,\"ZMQ_PULL\") }"},{"path":"https://docs.ropensci.org/rzmq/reference/init.message.html","id":null,"dir":"Reference","previous_headings":"","what":"create a message object. — init.message","title":"create a message object. — init.message","text":"Create ZeroMQ message object can sent multiple times","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/init.message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create a message object. — init.message","text":"","code":"init.message(data, serialize=TRUE, xdr=.Platform$endian==\"big\")"},{"path":"https://docs.ropensci.org/rzmq/reference/init.message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create a message object. — init.message","text":"data R object sent serialize whether call serialize sending data xdr passed directly serialize command serialize requested","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/init.message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create a message object. — init.message","text":"ZeroMQ message object external pointer","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/init.message.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"create a message object. — init.message","text":"http://www.zeromq.org   http://api.zeromq.org   http://zguide.zeromq.org/page:","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/init.message.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"create a message object. — init.message","text":"ZMQ written Martin Sustrik <sustrik@250bpm.com> Martin Lucina <mato@kotelna.sk>.   rzmq written Whit Armstrong.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rzmq/reference/init.message.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create a message object. — init.message","text":"","code":"if (FALSE) {  ## remote execution server in rzmq library(rzmq) data = list(x=5) msg = init.message(data) }"},{"path":"https://docs.ropensci.org/rzmq/reference/poll.socket.html","id":null,"dir":"Reference","previous_headings":"","what":"Polls a list of sockets, waiting for the presence of a nonblocking read, write, or error event. — poll.socket","title":"Polls a list of sockets, waiting for the presence of a nonblocking read, write, or error event. — poll.socket","text":"zmq_poll() function shall poll list sockets either read, write, error conditions subject millisecond resolution timeout.","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/poll.socket.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Polls a list of sockets, waiting for the presence of a nonblocking read, write, or error event. — poll.socket","text":"","code":"poll.socket(sockets, events, timeout=0L)"},{"path":"https://docs.ropensci.org/rzmq/reference/poll.socket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Polls a list of sockets, waiting for the presence of a nonblocking read, write, or error event. — poll.socket","text":"sockets list zmq socket objects. events list character vectors containing one events {read, write, error}. first element list corresponds first zmq socket, ... timeout numbers seconds wait events. Fractional seconds supported. ZeroMQ guarantees millisecond resolution. timeout -1L blocks event occurs; timeout 0L non-blocking.","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/poll.socket.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Polls a list of sockets, waiting for the presence of a nonblocking read, write, or error event. — poll.socket","text":"list pairlists corresponding polled zmq sockets. list one tags {read, write, error} logical values indicating results poll operation.","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/poll.socket.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Polls a list of sockets, waiting for the presence of a nonblocking read, write, or error event. — poll.socket","text":"http://www.zeromq.org http://api.zeromq.org http://zguide.zeromq.org/page:","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/poll.socket.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Polls a list of sockets, waiting for the presence of a nonblocking read, write, or error event. — poll.socket","text":"ZMQ written Martin Sustrik <sustrik@250bpm.com> Martin Lucina <mato@kotelna.sk>. rzmq written Whit Armstrong.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rzmq/reference/poll.socket.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Polls a list of sockets, waiting for the presence of a nonblocking read, write, or error event. — poll.socket","text":"","code":"if (FALSE) { library(rzmq)  # Create a set of REP-REQ sockets that # have a Send, Receive, Send, Receive, ... # pattern. context = init.context() in.socket = init.socket(context,\"ZMQ_REP\") bind.socket(in.socket,\"tcp://*:5557\")  out.socket = init.socket(context,\"ZMQ_REQ\") connect.socket(out.socket,\"tcp://*:5557\")  # Poll the REP and REQ sockets for all events. events <- poll.socket(list(in.socket, out.socket),                       list(c(\"read\", \"write\", \"error\"),                            c(\"read\", \"write\", \"error\")),                       timeout=0L)  # The REQ socket is writable without blocking. paste(\"Is upstream REP socket readable without blocking?\", events[[1]]$read) paste(\"Is upstream REP socket writable without blocking?\", events[[1]]$write) paste(\"Is downstream REQ socket readable without blocking?\", events[[2]]$read) paste(\"Is downstream REQ socket writable without blocking?\", events[[2]]$write)  # Send a message to the REP socket from the REQ socket. The # REQ socket must respond before the REP socket can send # another message. send.socket(out.socket, \"Hello World\")  events <- poll.socket(list(in.socket, out.socket),                       list(c(\"read\", \"write\", \"error\"),                            c(\"read\", \"write\", \"error\")),                       timeout=0L)  # The incoming message is readable on the REP socket. paste(\"Is upstream REP socket readable without blocking?\", events[[1]]$read) paste(\"Is upstream REP socket writable without blocking?\", events[[1]]$write) paste(\"Is downstream REQ socket readable without blocking?\", events[[2]]$read) paste(\"Is downstream REQ socket writable without blocking?\", events[[2]]$write)  receive.socket(in.socket)  events <- poll.socket(list(in.socket, out.socket),                       list(c(\"read\", \"write\", \"error\"),                            c(\"read\", \"write\", \"error\")),                       timeout=0L)  # The REQ socket is waiting for a response from the REP socket.  paste(\"Is upstream REP socket readable without blocking?\", events[[1]]$read) paste(\"Is upstream REP socket writable without blocking?\", events[[1]]$write) paste(\"Is downstream REQ socket readable without blocking?\", events[[2]]$read) paste(\"Is downstream REQ socket writable without blocking?\", events[[2]]$write)  send.socket(in.socket, \"Greetings\")  events <- poll.socket(list(in.socket, out.socket),                       list(c(\"read\", \"write\", \"error\"),                            c(\"read\", \"write\", \"error\")),                       timeout=0L)  # The REP response is waiting to be read on the REQ socket. paste(\"Is upstream REP socket readable without blocking?\", events[[1]]$read) paste(\"Is upstream REP socket writable without blocking?\", events[[1]]$write) paste(\"Is downstream REQ socket readable without blocking?\", events[[2]]$read) paste(\"Is downstream REQ socket writable without blocking?\", events[[2]]$write)  # Complete the REP-REQ transaction cycle by reading # the REP response. receive.socket(out.socket) }"},{"path":"https://docs.ropensci.org/rzmq/reference/receive.multipart.html","id":null,"dir":"Reference","previous_headings":"","what":"Receive multipart ZMQ message — receive.multipart","title":"Receive multipart ZMQ message — receive.multipart","text":"Returns list raw vectors parts multipart message.","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/receive.multipart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Receive multipart ZMQ message — receive.multipart","text":"","code":"receive.multipart(socket)"},{"path":"https://docs.ropensci.org/rzmq/reference/receive.multipart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Receive multipart ZMQ message — receive.multipart","text":"socket ZMQ socket receive data","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/receive.socket.html","id":null,"dir":"Reference","previous_headings":"","what":"Receive a message from the socket referenced by the socket argument. — receive.socket","title":"Receive a message from the socket referenced by the socket argument. — receive.socket","text":"zmq_recv() function shall receive message socket referenced socket argument. messages available specified socket, default function shall block request can satisfied. non-blocking receive can obtained setting dont.wait TRUE messages available specified socket, receive.socket() call return NULL immediately.","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/receive.socket.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Receive a message from the socket referenced by the socket argument. — receive.socket","text":"","code":"receive.socket(socket, unserialize=TRUE, dont.wait=FALSE) receive.null.msg(socket) receive.string(socket) receive.int(socket) receive.double(socket)"},{"path":"https://docs.ropensci.org/rzmq/reference/receive.socket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Receive a message from the socket referenced by the socket argument. — receive.socket","text":"socket zmq socket object unserialize whether call unserialize received data dont.wait defaults false, blocking receive. Set TRUE non-blocking receive.","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/receive.socket.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Receive a message from the socket referenced by the socket argument. — receive.socket","text":"value sent remote server NULL failure.   dont.wait TRUE message immediately   available receipt, NULL returned get.zmq.errno() set 11   get.zmq.strerror() set EAGAIN.","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/receive.socket.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Receive a message from the socket referenced by the socket argument. — receive.socket","text":"http://www.zeromq.org http://api.zeromq.org http://zguide.zeromq.org/page:","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/receive.socket.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Receive a message from the socket referenced by the socket argument. — receive.socket","text":"ZMQ written Martin Sustrik <sustrik@250bpm.com> Martin Lucina <mato@kotelna.sk>. rzmq written Whit Armstrong.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rzmq/reference/receive.socket.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Receive a message from the socket referenced by the socket argument. — receive.socket","text":"","code":"if (FALSE) { library(rzmq)  remote.exec <- function(out.socket,in.socket,fun,...) {     send.socket(out.socket,data=list(fun=fun,args=list(...)))     receive.socket(in.socket) }  context = init.context() out.socket = init.socket(context,\"ZMQ_PUSH\") bind.socket(out.socket,\"tcp://*:5557\")  in.socket = init.socket(context,\"ZMQ_PULL\") bind.socket(in.socket,\"tcp://*:5558\")   myfun <- function(x) {     sum(abs(x)) }  remote.exec(out.socket,in.socket,myfun,rnorm(1e3))  }"},{"path":"https://docs.ropensci.org/rzmq/reference/send.multipart.html","id":null,"dir":"Reference","previous_headings":"","what":"Send multipart ZMQ message. — send.multipart","title":"Send multipart ZMQ message. — send.multipart","text":"Queue list raw vectors sent series ZMQ message parts.   part last sent SNDMORE flag.","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/send.multipart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send multipart ZMQ message. — send.multipart","text":"","code":"send.multipart(socket, parts)"},{"path":"https://docs.ropensci.org/rzmq/reference/send.multipart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send multipart ZMQ message. — send.multipart","text":"socket ZMQ socket send data parts list raw vectors; component sent   one part message, order list","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/send.socket.html","id":null,"dir":"Reference","previous_headings":"","what":"send a message. — send.socket","title":"send a message. — send.socket","text":"Queue message referenced msg argument sent socket referenced socket argument. successful invocation send.socket indicate message transmitted network, queued socket ZMQ assumed responsibility message.","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/send.socket.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"send a message. — send.socket","text":"","code":"send.socket(socket, data, send.more=FALSE, serialize=TRUE, xdr=.Platform$endian==\"big\") send.null.msg(socket, send.more=FALSE) send.raw.string(socket,data,send.more=FALSE)"},{"path":"https://docs.ropensci.org/rzmq/reference/send.socket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"send a message. — send.socket","text":"socket zmq socket object data R object sent send.whether message frames sent serialize whether call serialize sending data xdr passed directly serialize command serialize requested","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/send.socket.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"send a message. — send.socket","text":"boolean indicating success failure operation.","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/send.socket.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"send a message. — send.socket","text":"http://www.zeromq.org   http://api.zeromq.org   http://zguide.zeromq.org/page:","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/send.socket.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"send a message. — send.socket","text":"ZMQ written Martin Sustrik <sustrik@250bpm.com> Martin Lucina <mato@kotelna.sk>.   rzmq written Whit Armstrong.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rzmq/reference/send.socket.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"send a message. — send.socket","text":"","code":"if (FALSE) {  ## remote execution server in rzmq library(rzmq) context = init.context() in.socket = init.socket(context,\"ZMQ_PULL\") bind.socket(in.socket,\"tcp://*:5557\")  out.socket = init.socket(context,\"ZMQ_PUSH\") bind.socket(out.socket,\"tcp://*:5558\")  while(1) {    msg = receive.socket(in.socket)    fun <- msg$fun    args <- msg$args    print(args)    ans <- do.call(fun,args)    send.socket(out.socket,ans) } }"},{"path":"https://docs.ropensci.org/rzmq/reference/socket.options.html","id":null,"dir":"Reference","previous_headings":"","what":"set a socket option. — socket.options","title":"set a socket option. — socket.options","text":"zmq_setsockopt() function shall set option specified option_name argument value pointed option_value argument ZMQ socket pointed socket argument.","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/socket.options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set a socket option. — socket.options","text":"","code":"set.hwm(socket, option.value) set.swap(socket, option.value) set.affinity(socket, option.value) set.identity(socket, option.value) subscribe(socket, option.value) unsubscribe(socket, option.value) set.rate(socket, option.value) set.recovery.ivl(socket, option.value) set.recovery.ivl.msec(socket, option.value) set.mcast.loop(socket, option.value) set.sndbuf(socket, option.value) set.rcvbuf(socket, option.value) set.linger(socket, option.value) set.reconnect.ivl(socket, option.value) set.zmq.backlog(socket, option.value) set.reconnect.ivl.max(socket, option.value) get.rcvmore(socket) get.last.endpoint(socket) get.send.timeout(socket) set.send.timeout(socket, option.value) get.rcv.timeout(socket) set.rcv.timeout(socket, option.value)"},{"path":"https://docs.ropensci.org/rzmq/reference/socket.options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set a socket option. — socket.options","text":"socket zmq socket object option.value new option value bet set","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/socket.options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"set a socket option. — socket.options","text":"boolean indicating success failure operation   case getsocketoptions, value requsted option.","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/socket.options.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"set a socket option. — socket.options","text":"http://www.zeromq.org   http://api.zeromq.org   http://zguide.zeromq.org/page:","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/socket.options.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"set a socket option. — socket.options","text":"ZMQ written Martin Sustrik <sustrik@250bpm.com> Martin Lucina <mato@kotelna.sk>.   rzmq written Whit Armstrong.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rzmq/reference/socket.options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"set a socket option. — socket.options","text":"","code":"if (FALSE) {  library(rzmq) context = init.context() socket = init.socket(context,\"ZMQ_REQ\")  set.hwm(socket, 1L) set.swap(socket, 100L) set.identity(socket, \"big.ass.socket\") }"},{"path":"https://docs.ropensci.org/rzmq/reference/zmq.error.html","id":null,"dir":"Reference","previous_headings":"","what":"get libzmq error numbers and error strings — zmq.error","title":"get libzmq error numbers and error strings — zmq.error","text":"return error number error description zmq call","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/zmq.error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get libzmq error numbers and error strings — zmq.error","text":"","code":"zmq.errno() zmq.strerror()"},{"path":"https://docs.ropensci.org/rzmq/reference/zmq.error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get libzmq error numbers and error strings — zmq.error","text":"integer zmq.errno string zmq.strerror","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/zmq.error.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"get libzmq error numbers and error strings — zmq.error","text":"http://www.zeromq.org   http://api.zeromq.org   http://zguide.zeromq.org/page:","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/zmq.error.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"get libzmq error numbers and error strings — zmq.error","text":"ZMQ written Martin Sustrik <sustrik@250bpm.com> Martin Lucina <mato@kotelna.sk>.   rzmq written Whit Armstrong.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rzmq/reference/zmq.error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get libzmq error numbers and error strings — zmq.error","text":"","code":"if (FALSE) {  library(rzmq) zmq.errno() zmq.strerror() }"},{"path":"https://docs.ropensci.org/rzmq/reference/zmq.version.html","id":null,"dir":"Reference","previous_headings":"","what":"get version of libzmq — zmq.version","title":"get version of libzmq — zmq.version","text":"return version string system zmq library","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/zmq.version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get version of libzmq — zmq.version","text":"","code":"zmq.version()"},{"path":"https://docs.ropensci.org/rzmq/reference/zmq.version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get version of libzmq — zmq.version","text":"string following format: major.minor.patch","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/zmq.version.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"get version of libzmq — zmq.version","text":"http://www.zeromq.org   http://api.zeromq.org   http://zguide.zeromq.org/page:","code":""},{"path":"https://docs.ropensci.org/rzmq/reference/zmq.version.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"get version of libzmq — zmq.version","text":"ZMQ written Martin Sustrik <sustrik@250bpm.com> Martin Lucina <mato@kotelna.sk>.   rzmq written Whit Armstrong.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rzmq/reference/zmq.version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get version of libzmq — zmq.version","text":"","code":"if (FALSE) {  library(rzmq) zmq.version() }"}]
